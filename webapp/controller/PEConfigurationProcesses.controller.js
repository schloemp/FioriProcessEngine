sap.ui.define(["sap/ui/core/mvc/Controller"], function(Controller) {
	"use strict";
	return Controller.extend("fpe.controller.PEConfigurationProcesses", {
		getRouter: function() {
			return sap.ui.core.UIComponent.getRouterFor(this);
		},
		currentProcess: undefined,
		currentStep: undefined,
		onSelectionChanged: function(aEvent) {
			var lItem = aEvent.getParameter("selectedItem");
			var lList = this.getView().byId("StepList");
			var lCtx = lItem.getBindingContext("config");
			this.currentProcess = lCtx.getObject();
			var lPath = "config>" + lCtx.getPath() + "/Steps";
			lList.applySettings({
				items: {
					path: lPath,
					template: this.StepItemTemplate
				}
			});
		},
		onSelectionChangedStep: function(aEvent) {
			var lItem = aEvent.getParameter("listItem");
			var lDetail = this.getView().byId("StepDetail");
			var lCtx = lItem.getBindingContext("config");
			this.currentStep = lCtx.getObject();
			lDetail.setBindingContext(lCtx, "config");
			this.getView().byId("ParametersList").applySettings({
				items: {
					path: "config>" + lCtx.getPath() + "/Parameters",
					template: this.StepParamTemplate
				}
			});
			this.getView().byId("DataFlowList").applySettings({
				items: {
					path: "config>" + lCtx.getPath() + "/DataFlows",
					template: this.StepFlowTemplate
				}
			});
		},
		onSelectionChangedFlow: function(aEvent) {
			var lItem = aEvent.getParameter("listItem");
			var lCtx = lItem.getBindingContext("config");
			this.currentFlow = lCtx.getObject();
		},
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf fpe.view.PEConfigurationProcesses
		 */
		onInit: function() {
			this.StepItemTemplate = this.getView().byId("StepList").getItems()[0].clone();
			this.StepParamTemplate = this.getView().byId("ParametersList").getItems()[0].clone();
			this.StepFlowTemplate = this.getView().byId("DataFlowList").getItems()[0].clone();
		}
		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf fpe.view.PEConfigurationProcesses
		 */
		//	onBeforeRendering: function() {
		//
		//	},
		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf fpe.view.PEConfigurationProcesses
		 */
		//	onAfterRendering: function() {
		//
		//	},
		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf fpe.view.PEConfigurationProcesses
		 */
		//	onExit: function() {
		//
		//	}
		,
		/**
		 *@memberOf fpe.controller.PEConfigurationProcesses
		 */
		onAddStepPress: function() {
			//This code was generated by the layout editor.
			var lModel = this.getView().getModel("config");
			this.currentProcess.Steps.push({
				Name: "",
				Steps: [],
				Parameters: []
			});
			lModel.refresh();
		},
		/**
		 *@memberOf fpe.controller.PEConfigurationProcesses
		 */
		onDeleteStepPress: function() {
			//This code was generated by the layout editor.
			var lModel = this.getView().getModel("config");
			this.currentProcess.Steps.splice(this.currentProcess.Steps.indexOf(this.currentStep), 1);
			lModel.refresh();
		},
		/**
		 *@memberOf fpe.controller.PEConfigurationProcesses
		 */
		onAddFlowPress: function() {
			//This code was generated by the layout editor.
			var lModel = this.getView().getModel("config");
			this.currentStep.DataFlows.push({
				Direction: "In",
				TargetPath: "",
				SourcePath: ""
			});
			lModel.refresh();
		},
		/**
		 *@memberOf fpe.controller.PEConfigurationProcesses
		 */
		onDeleteFlowPress: function() {
			//This code was generated by the layout editor.
			var lModel = this.getView().getModel("config");
			this.currentStep.DataFlows.splice(this.currentStep.DataFlows.indexOf(this.currentFlow), 1);
			lModel.refresh();
		},
		/**
		 *@memberOf fpe.controller.PEConfigurationProcesses
		 */
		onConfigStepsPress: function() {
			//This code was generated by the layout editor.
			this.getRouter().navTo("ConfigSteps");
		},
		/**
		 *@memberOf fpe.controller.PEConfigurationProcesses
		 */
		onNavPress: function() {
			//This code was generated by the layout editor.
			this.getRouter().navTo("Home");
		}
	});
});